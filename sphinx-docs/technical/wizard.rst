MDiocre Wizard
==============

Explanation
-----------
This provides **the front-ends** to create pages to entire sites from a
Python scripting perspective.

In this document, "sites" are defined as a set of subfolders (known as
`modules`) containing some documents or pages (in the HTML file format).
They are generated from a source directory using the
:py:func:`~mdiocre.Wizard.build_site()` function
to a build directory, both of which **must** be defined in the configuration
file.

Additionally, the list of modules and the templates to use for each, are
required to be defined in the file as well.

The source directories consist of Markdown files in which these functions
format, index and process, and HTML files which will simply be indexed and copied
to the build directory.

Documentation
-------------
.. autoclass:: mdiocre.Wizard
   :members:

On the Build Process
--------------------
                1. **PRE-BUILD PROCESS**

                   The process begins by checking directories,
                   starting with the **source** directory. As
                   it creates the directories where it doesn't
                   exist, this *could* be used to initialize
                   a website, but I wouldn't count on that.

                   Next, it checks the **build** directories.
                   It creates them if it doesn't exist.

                   Back to the **source** directory, if it can't find a file named
                   ``index.template`` on each of the module subdirectories,
                   it will **not** create an index for that
                   module.

                   **Page template** directories are checked as a **requirement**.
                   It will look at the list of templates
                   defined in the config, then look for the
                   corresponding file in the templates directory.
                   It will **crash** if it cannot find a specified
                   template in the templates directory.

                2. **BUILD PROCESS**

                   If the module is set to be indexed (and if
                   ``index.template`` is present as well), this
                   process will **ALWAYS** generate and
                   overwrite ``index.md``!

                   The ``index.md`` generated by this process
                   is a simple table of contents that may be
                   very long depending on how many pages you
                   have in your module.

                   During this process, it will call :py:func:`~mdiocre.Utils.process_vars`
                   to scan the files specifically for these variables:
                      * :obj:`date`
                            To set a date on the pages. This
                            should always be consistent across
                            pages. Best practice is to use the
                            `ISO-8601 <https://en.wikipedia.org/wiki/ISO_8601>`_ format, `YYYY-MM-DD`.
                            If undefined, the date will be absent (and
                            that's okay)
                      * :obj:`title`
                          To set a specific title of the page to link
                          on the index. This can also be put on the
                          templates for easy titling. If undefined,
                          it will simply use a Title Case version
                          of the file name.
                   The results will be stored on the special :obj:`content` variable,
                   which will then be inserted into ``index.template`` to create
                   ``index.md``.

                   The build process will then gather all the Markdown files
                   including the generated index, and will convert all of
                   them into their respective HTML files.

                   Additionally, if `move_html` is enabled, it will also
                   copy any other HTML files present in the module's source.

            Important:
                At this point, HTML files might only be indexed when there is
                at least 1 Markdown file present in the module.
            
            Important:
                Subdirectories in modules have limited support. (Subdirs for
                html includes are not supported yet.)
                
            Important:
                Special module name `root` will not be indexed and its docs
                will need to be placed inside the source directory itself.
                Subsequently, it will be built *on* the build directory.
                It also can not support subdirectories.
            
            Important:
                * Markdown files **MUST** have the extension :obj:`.md`!
                  :obj:`.markdown`, :obj:`.mdown` etc. are NOT supported.
                * HTML files **MUST** have the extension :obj:`.html`!
                  :obj:`.htm`, :obj:`.hta`, :obj:`.xhtml` etc. are NOT supported.
                
       